@using BlazzingExam.Core.Security
@inject IPermissionChecker _permissionChecker
@inject NavigationManager _navigationManager

<AuthorizeView>
    <Authorized>
        @if (_hasPermission)
        {
            <div>@Authorized</div>
        }else
        {
            <div>@AuthorizePermNotFound</div>
        }
    </Authorized>
    <NotAuthorized>
        @NotAuthorized
    </NotAuthorized>
    <Authorizing>
        @Authorizing
    </Authorizing>
</AuthorizeView>

@code {
    [Parameter]
    public RenderFragment Authorized { get; set; }

    [Parameter]
    public RenderFragment NotAuthorized { get; set; }

    [Parameter]
    public RenderFragment Authorizing { get; set; }

    [Parameter]
    public RenderFragment AuthorizePermNotFound { get; set; }

    [Parameter]
    public int PermissionId { get; set; }

    [Parameter]
    public string? RedirectUrl { get; set; }

    [Parameter]
    public bool ReloadRequired { get; set; }

    private bool _hasPermission;

    protected override async Task OnInitializedAsync()
    {
        _hasPermission = await _permissionChecker.HasPermission(PermissionId);
        if (!_hasPermission && RedirectUrl != null)
            _navigationManager.NavigateTo(RedirectUrl, ReloadRequired);
    }

}
